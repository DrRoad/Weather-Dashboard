## Results include:
## AA = additive genetic matrix
## DD = dominance genetic matrix
## AD, HH, MH = other genetic matrices
## ib = inbreeding coefficient
## Use this result in the QTL mapping code
sum(is.na(gm))
## Check that there are no NAs in the gm result
gdatImputed <- genoImpute(gdat, gmap, gr = 6, na.str = "-")
## Impute the data
## Only suitable for advanced intercross lines (AI)
## Unknown variable gr = generation that we are looking at; na.str = replace NAs with: -
save(idcf, ped, gdat, pdat, gmap, id, gm, gdatImputed, file = "3_saved_data.RData")
load("3_saved_data.RData")
id <- intersect(id, row.names(gdat))
length(id)
gdat <- gdat[id, ]
ped <- ped[ped$id%in%id, ]
#head(ped)
pdat <- pdat[id, ]
source("Trait2QTL-original.R")
head(pdat)
testpdat <- pdat
hist(testpdat$mean)
plot(testpdat)
hist(sqrt(testpdat$Corielaena))
hist(sqrt(testpdat$Ripe.capsule))
hist(sqrt(testpdat$Unripe.capsule))
normed_data <- pdat
normed_data$Corielaena <- sqrt(normed_data$Corielaena)
normed_data$Ripe.capsule <- sqrt(normed_data$Ripe.capsule)
normed_data$Unripe.capsule <- sqrt(normed_data$Unripe.capsule)
## Map it, output is the expected graph
azamf.QTL <- Trait2QTL(pdata = normed_data,
gdata = gdatImputed,
gm = gm,
filename = "mortality.example",
gmap = gmap,
TraitID = "Corielaena",
boot = 1)
## Map it, output is the expected graph
azamf.QTL <- Trait2QTL(pdata = normed_data,
gdata = gdatImputed,
gm = gm,
filename = "mortality.example",
gmap = gmap,
TraitID = "Corielaena",
boot = 100)
source("Trait2QTL.R")
head(pdat)
#head(gdatImputed)
## For running an example, only use 1 boot strap.
## For real analysis, use boot = 100 or boot = 500 to calculate confidence invertal.
## This will take quite a while to finish...
## By default, likelihood ratio tests are used for calculating significance.
testpdat <- pdat
# Normalize the data
hist(sqrt(testpdat$Corielaena))
hist(sqrt(testpdat$Ripe.capsule))
hist(sqrt(testpdat$Unripe.capsule))
# Log transform the data for a normal transformation
normed_data <- pdat
normed_data$Corielaena <- sqrt(normed_data$Corielaena)
normed_data$Ripe.capsule <- sqrt(normed_data$Ripe.capsule)
normed_data$Unripe.capsule <- sqrt(normed_data$Unripe.capsule)
## Map it, output is the expected graph
azamf.QTL <- Trait2QTL(pdata = normed_data,
gdata = gdatImputed,
gm = gm,
filename = "mortality.example",
gmap = gmap,
TraitID = "Corielaena",
boot = 1)
source("Trait2QTL.R")
head(pdat)
#head(gdatImputed)
## For running an example, only use 1 boot strap.
## For real analysis, use boot = 100 or boot = 500 to calculate confidence invertal.
## This will take quite a while to finish...
## By default, likelihood ratio tests are used for calculating significance.
testpdat <- pdat
# Normalize the data
hist(sqrt(testpdat$Corielaena))
hist(sqrt(testpdat$Ripe.capsule))
hist(sqrt(testpdat$Unripe.capsule))
# Log transform the data for a normal transformation
normed_data <- pdat
normed_data$Corielaena <- sqrt(normed_data$Corielaena)
normed_data$Ripe.capsule <- sqrt(normed_data$Ripe.capsule)
normed_data$Unripe.capsule <- sqrt(normed_data$Unripe.capsule)
## Map it, output is the expected graph
azamf.QTL <- Trait2QTL(pdata = normed_data,
gdata = gdatImputed,
gm = gm,
filename = "mortality.example",
gmap = gmap,
TraitID = "Corielaena",
boot = 1)
source("Trait2QTL-original.R")
head(pdat)
#head(gdatImputed)
## For running an example, only use 1 boot strap.
## For real analysis, use boot = 100 or boot = 500 to calculate confidence invertal.
## This will take quite a while to finish...
## By default, likelihood ratio tests are used for calculating significance.
testpdat <- pdat
# Normalize the data
hist(sqrt(testpdat$Corielaena))
hist(sqrt(testpdat$Ripe.capsule))
hist(sqrt(testpdat$Unripe.capsule))
# Log transform the data for a normal transformation
normed_data <- pdat
normed_data$Corielaena <- sqrt(normed_data$Corielaena)
normed_data$Ripe.capsule <- sqrt(normed_data$Ripe.capsule)
normed_data$Unripe.capsule <- sqrt(normed_data$Unripe.capsule)
## Map it, output is the expected graph
azamf.QTL <- Trait2QTL(pdata = normed_data,
gdata = gdatImputed,
gm = gm,
filename = "mortality.example",
gmap = gmap,
TraitID = "Corielaena",
boot = 1)
Trait2QTL(pdata = normed_data,
gdata = gdatImputed,
gm = gm,
filename = "mortality.example",
gmap = gmap,
TraitID = "Ripe.capsule",
boot = 1)
Trait2QTL(pdata = normed_data,
gdata = gdatImputed,
gm = gm,
filename = "mortality.example",
gmap = gmap,
TraitID = "Unripe.capsule",
boot = 1)
## Map it, output is the expected graph
azamf.QTL <- Trait2QTL(pdata = normed_data,
gdata = gdatImputed,
gm = gm,
filename = "mortality.example",
gmap = gmap,
TraitID = "Corielaena",
boot = 1)
## Map it, output is the expected graph
azamf.QTL <- Trait2QTL(pdata = normed_data,
gdata = gdatImputed,
gm = gm,
filename = "mortality.example",
gmap = gmap,
TraitID = "Corielaena",
boot = 1)
source("Trait2QTL-original.R")
head(pdat)
#head(gdatImputed)
## For running an example, only use 1 boot strap.
## For real analysis, use boot = 100 or boot = 500 to calculate confidence invertal.
## This will take quite a while to finish...
## By default, likelihood ratio tests are used for calculating significance.
testpdat <- pdat
# Normalize the data
hist(sqrt(testpdat$Corielaena))
hist(sqrt(testpdat$Ripe.capsule))
hist(sqrt(testpdat$Unripe.capsule))
# Log transform the data for a normal transformation
normed_data <- pdat
normed_data$Corielaena <- sqrt(normed_data$Corielaena)
normed_data$Ripe.capsule <- sqrt(normed_data$Ripe.capsule)
normed_data$Unripe.capsule <- sqrt(normed_data$Unripe.capsule)
## Map it, output is the expected graph
azamf.QTL <- Trait2QTL(pdata = normed_data,
gdata = gdatImputed,
gm = gm,
filename = "mortality.example",
gmap = gmap,
TraitID = "Corielaena",
boot = 1)
azamf.QTL <- Trait2QTL(pdata = normed_data,
gdata = gdatImputed,
gm = gm,
filename = "mortality.example",
gmap = gmap,
TraitID = "Corielaena",
boot = 100)
write.table(azamf.QTL, file = "4_qtl_results.csv", sep=";")
file <- read.csv2("4_qtl_results.csv", header = T)
## Load csv file that we just created
file$LOD <- as.numeric(as.character(file$LOD))
file1 <- arrange(file, desc(LOD))
## Sort by LOD value
file2 <- file1[1:100, ]
## Grab certain number of values from the top of the QTL selection list
file2$SC_ID1 <- lapply(strsplit(as.character(file2$SC_ID), "_"), "[", 1)
file2$SC_ID2 <- lapply(strsplit(as.character(file2$SC_ID), "_"), "[", 2)
require(gdata)
annot <- read.table("NIATTr2.AN6.txt", header = T)
annot$X12335 <- as.numeric(as.character(annot$X12335))
annot$X12823 <- as.numeric(as.character(annot$X12823))
colnames(annot)[1] <- "chromosome"
colnames(annot)[9] <- "genes"
file.create("5_AMF Gene Candidate Details.csv");
file.create("6_AMF Gene Candidates.csv");
for (i in 1:nrow(file2)){
if (i == 1) {
columns <- c("Chromosome", "Gene", "Start", "Stop", "GeneAnnotationResult", "Type", "GeneID", "QTLMappingTarget", "QTLMappingLODScore")
write.table(t(as.matrix(columns)), file = "6_AMF Gene Candidates.csv", col.names = FALSE, quote = FALSE, sep = ";");
}
print(i
);
s <- as.numeric(file2$SC_ID2[i]);
p <- file2$SC_ID1[i];
flex <- 70000;
subset <- subset(annot, chromosome == p);
subset1 <- subset(subset, X12335 > (s - flex));
subset2 <- subset(subset1, X12823 < (s + flex));
if (nrow(subset2) != 0) {
subset2$Genenames <- lapply(strsplit(as.character(subset2$genes), ";"), "[", 2);
subset3 <- subset2[ , c(1, 3, 4, 5, 10)];
subset3$Name <- lapply(strsplit(as.character(subset3$Genenames), "="), "[", 1);
subset3$GeneID <- lapply(strsplit(as.character(subset3$Genenames), "="), "[", 2);
subset4 <- subset(subset3, Name == "Name");
subset4$QTLMappingTarget <- file2$SC_ID[i];
subset4$QTLMappingLODScore <- file2$LOD[i];
subset3 <- as.matrix(subset3);
subset4 <- as.matrix(subset4);
write.table(subset3, file = "5_AMF Gene Candidate Details.csv", sep = ";", append = TRUE,
col.names = FALSE);
write.table(subset4, file = "6_AMF Gene Candidates.csv", sep = ";", append = TRUE,
col.names = FALSE);
}
}
file.create("5_AMF Gene Candidate Details.csv");
file.create("6_AMF Gene Candidates.csv");
for (i in 1:nrow(file2)){
if (i == 1) {
columns <- c("Chromosome", "Gene", "Start", "Stop", "GeneAnnotationResult", "Type", "GeneID", "QTLMappingTarget", "QTLMappingLODScore")
write.table(t(as.matrix(columns)), file = "6_AMF Gene Candidates.csv", col.names = FALSE, quote = FALSE, sep = ";");
}
print(i
);
s <- as.numeric(file2$SC_ID2[i]);
p <- file2$SC_ID1[i];
flex <- 70000;
subset <- subset(annot, chromosome == p);
subset1 <- subset(subset, X12335 > (s - flex));
subset2 <- subset(subset1, X12823 < (s + flex));
if (nrow(subset2) != 0) {
subset2$Genenames <- lapply(strsplit(as.character(subset2$genes), ";"), "[", 2);
subset3 <- subset2[ , c(1, 3, 4, 5, 10)];
subset3$Name <- lapply(strsplit(as.character(subset3$Genenames), "="), "[", 1);
subset3$GeneID <- lapply(strsplit(as.character(subset3$Genenames), "="), "[", 2);
subset4 <- subset(subset3, Name == "Name");
subset4$QTLMappingTarget <- file2$SC_ID[i];
subset4$QTLMappingLODScore <- file2$LOD[i];
subset3 <- as.matrix(subset3);
subset4 <- as.matrix(subset4);
write.table(subset3, file = "5_AMF Gene Candidate Details.csv", sep = ",", append = TRUE,
col.names = FALSE);
write.table(subset4, file = "6_AMF Gene Candidates.csv", sep = ",", append = TRUE,
col.names = FALSE);
}
}
file.create("5_AMF Gene Candidate Details.csv");
file.create("6_AMF Gene Candidates.csv");
for (i in 1:nrow(file2)){
if (i == 1) {
columns <- c("Chromosome", "Gene", "Start", "Stop", "GeneAnnotationResult", "Type", "GeneID", "QTLMappingTarget", "QTLMappingLODScore")
write.table(t(as.matrix(columns)), file = "6_AMF Gene Candidates.csv", col.names = FALSE, quote = FALSE, sep = ";");
}
print(i
);
s <- as.numeric(file2$SC_ID2[i]);
p <- file2$SC_ID1[i];
flex <- 70000;
subset <- subset(annot, chromosome == p);
subset1 <- subset(subset, X12335 > (s - flex));
subset2 <- subset(subset1, X12823 < (s + flex));
if (nrow(subset2) != 0) {
subset2$Genenames <- lapply(strsplit(as.character(subset2$genes), ";"), "[", 2);
subset3 <- subset2[ , c(1, 3, 4, 5, 10)];
subset3$Name <- lapply(strsplit(as.character(subset3$Genenames), "="), "[", 1);
subset3$GeneID <- lapply(strsplit(as.character(subset3$Genenames), "="), "[", 2);
subset4 <- subset(subset3, Name == "Name");
subset4$QTLMappingTarget <- file2$SC_ID[i];
subset4$QTLMappingLODScore <- file2$LOD[i];
subset3 <- as.matrix(subset3);
subset4 <- as.matrix(subset4);
write.table(subset3, file = "5_AMF Gene Candidate Details.csv", sep = ",", append = TRUE,
col.names = FALSE);
write.table(subset4, file = "6_AMF Gene Candidates.csv", sep = ",", append = TRUE,
col.names = FALSE);
}
}
file.create("5_AMF Gene Candidate Details.csv");
file.create("6_AMF Gene Candidates.csv");
for (i in 1:nrow(file2)){
if (i == 1) {
columns <- c("Chromosome", "Gene", "Start", "Stop", "GeneAnnotationResult", "Type", "GeneID", "QTLMappingTarget", "QTLMappingLODScore")
write.table(t(as.matrix(columns)), file = "6_AMF Gene Candidates.csv", col.names = FALSE, quote = FALSE, sep = ",");
}
print(i
);
s <- as.numeric(file2$SC_ID2[i]);
p <- file2$SC_ID1[i];
flex <- 70000;
subset <- subset(annot, chromosome == p);
subset1 <- subset(subset, X12335 > (s - flex));
subset2 <- subset(subset1, X12823 < (s + flex));
if (nrow(subset2) != 0) {
subset2$Genenames <- lapply(strsplit(as.character(subset2$genes), ";"), "[", 2);
subset3 <- subset2[ , c(1, 3, 4, 5, 10)];
subset3$Name <- lapply(strsplit(as.character(subset3$Genenames), "="), "[", 1);
subset3$GeneID <- lapply(strsplit(as.character(subset3$Genenames), "="), "[", 2);
subset4 <- subset(subset3, Name == "Name");
subset4$QTLMappingTarget <- file2$SC_ID[i];
subset4$QTLMappingLODScore <- file2$LOD[i];
subset3 <- as.matrix(subset3);
subset4 <- as.matrix(subset4);
write.table(subset3, file = "5_AMF Gene Candidate Details.csv", sep = ",", append = TRUE,
col.names = FALSE);
write.table(subset4, file = "6_AMF Gene Candidates.csv", sep = ",", append = TRUE,
col.names = FALSE);
}
}
##-----------------------------------------------------------------------------##
##-----------------------------------------------------------------------------##
##-----------------------------------------------------------------------------##
file <- read_csv('6_AMF Gene Candidates.csv')
getwd()
library(readr)
file <- read_csv('6_AMF Gene Candidates.csv')
sort(table(file$GeneID),decreasing=TRUE)[1:3]
sort(table(file$GeneID),decreasing=TRUE)[1:5]
## Author of the R file: Shuqing Xu
## R file last updated: 8.8.2017
## Edited by: EM on 21.3.2017
## QTL Mapping
## Output: A QTL Graph for 13-Carboxyblumenol Levels from the 2017 Arizona Field
## Normalized by D6 ABA, mass, and by the UT in each community (closest UT used
## when UT values were below the threshold)
#################################################################################
################### Set-Up Workspace and Resource Files #########################
#################################################################################
setwd("C:/Users/mbradshaw/Documents/QTL-Capsules-Normalized")
## Set the path for accessing and saving files
rm(list = ls())
## Clear the workspace of all files
# install.packages("QTLRel")
# install.packages("dplyr")
library(QTLRel)
library(plyr)
library(dplyr)
library(gdata)
library(ggplot2)
## Install and load the appropriate packages
gdat <- read.table("AZxUT.NIATTr2.GTdata",
sep = ",",
header = T,
check.names = F,
row.names = 1)
## Load AZxUT.NIATTr2.GTdata
gmap <- read.table("AZxUT.NIATTr2.linkagemap",
header = T,
check.names = F,
nrows = 100000)
## Load AZxUT.NIATTr2.linkagemap
ped <- read.table("F11PedgreeV2.txt",
header = T,
check.names = F)
## Load F11PedgreeV2.txt
file <- read.csv('AZ_CAPSULES_CORIMELAENA.csv', header = T)
biomass <- read.csv('AZ_BIOMASS.csv', header = T)
biomass_sub_set <- biomass[,6:7]
biomass_sub_set[is.na(biomass_sub_set)] <- 0
biogrouped <- biomass_sub_set %>%
group_by(Genotype) %>%
summarise_all(mean)
#I want to exclude the first bit of data collected in this data set, it is just all zeros and will mess with the mean values I get later one
subset <- file[file$Date != '20-21.6',6:10]
#replace all blanks with 0
subset[is.na(subset)] <- 0
grouped <- subset %>%
group_by(Genotype) %>%
summarise_all(mean)
#order both data sets
subset_ordered <- grouped[order(grouped$Genotype),]
bio_subset_ordered <- biogrouped[order(biogrouped$Genotype),]
normed_sub_set <- subset_ordered
normed_sub_set[,3:5] <- normed_sub_set[,3:5] / bio_subset_ordered$Fresh_biomass_g
ggplot(normed_sub_set,aes(x = Corielaena,y=Ripe.capsule, color = Unripe.capsule)) +
geom_point()
write.table(normed_sub_set, file = "0_grouped_and_filtered_data.txt", sep = "\t")
grouped <- normed_sub_set[grouped$Genotype != "UT", ]
hist(normed_sub_set$Corielaena)
hist(normed_sub_set$Ripe.capsule)
hist(normed_sub_set$Unripe.capsule)
ggplot(normed_sub_set, aes(x=Corielaena)) + geom_histogram()
ggplot(normed_sub_set, aes(x=Ripe.capsule)) + geom_histogram()
ggplot(normed_sub_set, aes(x=Unripe.capsule)) + geom_histogram()
## QTL Mapping
## Output: A QTL Graph for 13-Carboxyblumenol Levels from the 2017 Arizona Field
## Normalized by D6 ABA, mass, and by the UT in each community (closest UT used
## when UT values were below the threshold)
#################################################################################
################### Set-Up Workspace and Resource Files #########################
#################################################################################
setwd("C:/Users/mbradshaw/Documents/QTL-Capsules")
## Set the path for accessing and saving files
rm(list = ls())
## Clear the workspace of all files
# install.packages("QTLRel")
# install.packages("dplyr")
library(QTLRel)
library(plyr)
library(dplyr)
library(gdata)
library(ggplot2)
## Install and load the appropriate packages
gdat <- read.table("AZxUT.NIATTr2.GTdata",
sep = ",",
header = T,
check.names = F,
row.names = 1)
## Load AZxUT.NIATTr2.GTdata
gmap <- read.table("AZxUT.NIATTr2.linkagemap",
header = T,
check.names = F,
nrows = 100000)
## Load AZxUT.NIATTr2.linkagemap
ped <- read.table("F11PedgreeV2.txt",
header = T,
check.names = F)
## Load F11PedgreeV2.txt
file <- read.csv('AZ_CAPSULES_CORIMELAENA.csv', header = T)
#file1 <- file[ , 2:3]
#file$UTNorm_13.Carboxy <- as.numeric(as.character(file$UTNorm_13.Carboxy))
#file2 <- na.omit(file1)
#I want to exclude the first bit of data collected in this data set, it is just all zeros and will mess with the mean values I get later one
subset <- file[file$Date != '20-21.6',6:10]
#replace all blanks with 0
subset[is.na(subset)] <- 0
grouped <- subset %>%
group_by(Genotype) %>%
summarise_all(mean)
ggplot(grouped,aes(x = Corielaena,y=Ripe.capsule, color = Unripe.capsule)) +
geom_point()
write.table(grouped, file = "0_grouped_and_filtered_data.txt", sep = "\t")
grouped <- grouped[grouped$Genotype != "UT", ]
load("3_saved_data.RData")
id <- intersect(id, row.names(gdat))
length(id)
gdat <- gdat[id, ]
ped <- ped[ped$id%in%id, ]
#head(ped)
pdat <- pdat[id, ]
#head(pdat)
#################################################################################
################################## QTL Mapping ##################################
#################################################################################
## Load the QTL mapping function
source("Trait2QTL-original.R")
head(pdat)
#head(gdatImputed)
## For running an example, only use 1 boot strap.
## For real analysis, use boot = 100 or boot = 500 to calculate confidence invertal.
## This will take quite a while to finish...
## By default, likelihood ratio tests are used for calculating significance.
testpdat <- pdat
hist(testpdat$mean)
# Normalize the data
testpdat$norm <- log(testpdat$mean)
plot(testpdat)
hist(sqrt(testpdat$Corielaena))
hist(sqrt(testpdat$Ripe.capsule))
hist(sqrt(testpdat$Unripe.capsule))
normed_data <- pdat
normed_data$Corielaena <- sqrt(normed_data$Corielaena)
normed_data$Ripe.capsule <- sqrt(normed_data$Ripe.capsule)
normed_data$Unripe.capsule <- sqrt(normed_data$Unripe.capsule)
hist(sqrt(testpdat$Corielaena))
hist(sqrt(testpdat$Ripe.capsule))
hist(sqrt(testpdat$Unripe.capsule))
hist(testpdat$Corielaena)
source("Trait2QTL.R")
head(pdat)
#head(gdatImputed)
## For running an example, only use 1 boot strap.
## For real analysis, use boot = 100 or boot = 500 to calculate confidence invertal.
## This will take quite a while to finish...
## By default, likelihood ratio tests are used for calculating significance.
testpdat <- pdat
hist(testpdat$mean)
# Normalize the data
testpdat$norm <- log(testpdat$mean)
plot(testpdat)
hist(testpdat$Corielaena)
hist(sqrt(testpdat$Ripe.capsule))
hist(sqrt(testpdat$Unripe.capsule))
# Log transform the data for a normal transformation
normed_data <- pdat
normed_data$Corielaena <- sqrt(normed_data$Corielaena)
normed_data$Ripe.capsule <- sqrt(normed_data$Ripe.capsule)
normed_data$Unripe.capsule <- sqrt(normed_data$Unripe.capsule)
## Map it, output is the expected graph
azamf.QTL <- Trait2QTL(pdata = normed_data,
gdata = gdatImputed,
gm = gm,
filename = "mortality.example",
gmap = gmap,
TraitID = "Corielaena",
boot = 1)
